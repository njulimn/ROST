
 cmake_minimum_required(VERSION 3.15)
 set(project_name follylock)
 PROJECT(${project_name})
 find_package(Boost REQUIRED)
 find_package(folly REQUIRED)
 find_package(GFlags REQUIRED)
 #include_directories(${Boost_INCLUDE_DIRS})
 #include_directories(${folly_INCLUDE_DIRS})
 set_and_check(FOLLY_INCLUDE_DIR /usr/local/include/folly)
 set_and_check(FOLLY_CMAKE_DIR /usr/local/lib/cmake/folly)
 if (NOT TARGET Folly::folly)
  include("${FOLLY_CMAKE_DIR}/folly-targets.cmake")
 endif()
 set(FOLLY_LIBRARIES Folly::folly)
 if (NOT folly_FIND_QUIETLY)
  message(STATUS "Found folly: ${PACKAGE_PREFIX_DIR}")
 endif()
 if (CMAKE_SYSTEM_NAME MATCHES "Linux")
    # AddressSanitizer, currently removed to pass basic tests
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=address")
    set(CMAKE_CXX_FLAGS "-g -Wall")
    SET(CMAKE_BUILE_TYPE DEBUG)
    SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -Wall -g2 -ggdb")  
    SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall")
endif(CMAKE_SYSTEM_NAME MATCHES "Linux")
add_compile_options(-std=c++17)
# make target
file(GLOB_RECURSE source_files ${PROJECT_SOURCE_DIR}/src/*.cpp )
add_executable(${project_name} ${source_files})
target_compile_definitions(${project_name} PRIVATE DEBUG_ON)
target_link_libraries(${project_name} ${Boost_LIBRARIES} ${FOLLY_LIBRARIES})
